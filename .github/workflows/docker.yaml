name: Docker CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      DOCKER_LOGIN_YN:
        description: '是否登录 Docker Hub (1 为登录，0 为不登录)'
        required: false

env:
  ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
  ALIYUN_NAME_SPACE: ${{ secrets.ALIYUN_NAME_SPACE }}
  ALIYUN_REGISTRY_USER: ${{ secrets.ALIYUN_REGISTRY_USER }}
  ALIYUN_REGISTRY_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
  HUBDOCKER_USER: ${{ secrets.HUBDOCKER_USER }}
  HUBDOCKER_PASSWORD: ${{ secrets.HUBDOCKER_PASSWORD }}
  DOCKER_LOGIN_YN: ${{ github.event.inputs.DOCKER_LOGIN_YN || '0' }}

jobs:
  build:
    name: Pull and Push Docker Images
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart Docker
      run: sudo service docker restart

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker Login for Hub Docker
      if: ${{ env.DOCKER_LOGIN_YN == '1' }}
      run: echo $HUBDOCKER_PASSWORD | docker login -u $HUBDOCKER_USER --password-stdin

    - name: Docker Login for Aliyun Registry
      run: echo $ALIYUN_REGISTRY_PASSWORD | docker login -u $ALIYUN_REGISTRY_USER --password-stdin $ALIYUN_REGISTRY

    - name: Read images.txt and process images
      run: |
        declare -A duplicate_images
        declare -A temp_map

        # Read images from images.txt and preprocess data
        while IFS= read -r line || [ -n "$line" ]; do
          if [[ -z "$line" ]] || [[ "$line" =~ ^#.* ]]; then
            continue
          fi
          image_name=$(echo "$line" | awk -F'/' '{print $NF}')
          image_namespace=$(echo "$line" | awk -F'/' '{if (NF>1) print $1}')
          
          if [[ -n "${temp_map[$image_name]}" && "${temp_map[$image_name]}" != "$image_namespace" ]]; then
            duplicate_images[$image_name]="true"
          else
            temp_map[$image_name]=$image_namespace
          fi
        done < images.txt

        # Pull, tag, and push images, handle duplicates
        while IFS= read -r line || [ -n "$line" ]; do
          if [[ -z "$line" ]] || [[ "$line" =~ ^#.* ]]; then
            continue
          fi
          echo "Processing $line"
          image_name_tag=$(echo "$line" | awk -F'/' '{print $NF}')
          image_namespace=$(echo "$line" | awk -F'/' '{if (NF>1) print $1}')

          if [[ -n "${duplicate_images[$image_name_tag]}" && -n "$image_namespace" ]]; then
            new_image_name="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_namespace}_${image_name_tag}"
          else
            new_image_name="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name_tag"
          fi

          docker pull "$line"
          docker tag "$line" "$new_image_name"
          docker push "$new_image_name"

          # Clean up
          docker rmi "$line" "$new_image_name"
        done < images.txt

    - name: Display Disk Usage
      run: df -h