name: Docker CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      DOCKER_LOGIN_YN:
        description: '手动触发时选择是否登录 Docker Hub (1 登录，0 不登录)'
        required: false
        # 默认情况下不登录 Docker Hub
        default: '0'

# 设置环境变量，从 GitHub Secrets 中获取
env:
  ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
  ALIYUN_NAME_SPACE: ${{ secrets.ALIYUN_NAME_SPACE }}
  ALIYUN_REGISTRY_USER: ${{ secrets.ALIYUN_REGISTRY_USER }}
  ALIYUN_REGISTRY_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
  # 从 Secrets 获取 HUBDOCKER_USER 和 HUBDOCKER_PASSWORD
  HUBDOCKER_USER: ${{ secrets.HUBDOCKER_USER }}
  HUBDOCKER_PASSWORD: ${{ secrets.HUBDOCKER_PASSWORD }}
  # 根据 Secrets 中的 DOCKER_LOGIN_YN 决定是否登录 Docker Hub
  DOCKER_LOGIN_YN: ${{ secrets.DOCKER_LOGIN_YN }}

jobs:
  build-and-push:
    name: Pull and Push Docker Images
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="
        
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 1  # 检出最新的代码

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart Docker
      run: sudo service docker restart  # 重启 Docker 服务

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3  # 设置 Docker Buildx

    # 根据 DOCKER_LOGIN_YN 环境变量决定是否登录 Docker Hub
    - name: Docker Login for Hub Docker
      if: ${{ env.DOCKER_LOGIN_YN == '1' }}
      run: |
        echo "Logging into Docker Hub as ${HUBDOCKER_USER}"
        echo "${HUBDOCKER_PASSWORD}" | docker login -u "${HUBDOCKER_USER}" --password-stdin

    # 总是执行登录阿里云 Registry 的步骤
    - name: Docker Login for Aliyun Registry
      run: |
        echo "Logging into Aliyun Registry as ${ALIYUN_REGISTRY_USER}"
        echo "${ALIYUN_REGISTRY_PASSWORD}" | docker login -u "${ALIYUN_REGISTRY_USER}" --password-stdin "${ALIYUN_REGISTRY}"

    # 从 images.txt 读取 Docker 镜像列表并处理
    - name: Read images.txt and process images
      run: |
        # 数据预处理,判断镜像是否重名
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo "$line" | awk '{print $NF}')
            # 将@sha256:等字符删除
            image="${image%%@*}"
            echo "image $image"
            # 获取镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            echo "image_name_tag $image_name_tag"
            # 获取命名空间 例如kasmweb,  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            echo "name_space: $name_space"
            # 这里不要是空值影响判断
            name_space="${name_space}_"
            # 获取镜像名例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            echo "image_name: $image_name"
            
            # 如果镜像存在于数组中，则添加temp_map
            if [[ -n "${temp_map[$image_name]}" ]]; then
                 # 如果temp_map已经存在镜像名，判断是不是同一命名空间
                 if [[ "${temp_map[$image_name]}" != $name_space  ]]; then
                    echo "duplicate image name: $image_name"
                    duplicate_images[$image_name]="true"
                 fi
            else
                # 存镜像的命名空间
                temp_map[$image_name]=$name_space
            fi       
        done < images.txt
        
        
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
        
            echo "docker pull $line"
            docker pull $line
            platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            echo "platform is $platform"
            # 如果存在架构信息 将架构信息拼到镜像名称前面
            if [ -z "$platform" ]; then
                platform_prefix=""
            else
                platform_prefix="${platform//\//_}_"
            fi
            echo "platform_prefix is $platform_prefix"
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo "$line" | awk '{print $NF}')

            # 获取 镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            # 获取命名空间 例如kasmweb  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            # 获取镜像名例  例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
        
            name_space_prefix=""
            # 如果镜像名重名
            if [[ -n "${duplicate_images[$image_name]}" ]]; then
               #如果命名空间非空，将命名空间加到前缀
               if [[ -n "${name_space}" ]]; then
                  name_space_prefix="${name_space}_"
               fi
            fi
            
            # 将@sha256:等字符删除
            image_name_tag="${image_name_tag%%@*}"
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
            echo "docker tag $image $new_image"
            docker tag $image $new_image
            echo "docker push $new_image"
            docker push $new_image
            echo "开始清理磁盘空间"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="
            docker rmi $image
            docker rmi $new_image
            echo "磁盘空间清理完毕"

         done < images.txt

    - name: Display Disk Usage
      run: df -h  # 显示磁盘使用情况

    - name: Display files Usage
      run: ls -l #现实文件使用情况
